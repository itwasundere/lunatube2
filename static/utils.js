// Generated by CoffeeScript 1.4.0
(function() {
  var crypto, dev, gates, globals;

  if (typeof window !== "undefined") {
    globals = window || module.exports;
  } else {
    globals = module.exports;
    crypto = require('crypto');
  }

  dev = "AI39si5Us3iYwmRdK0wa2Qf2P9eV-Z8tbjogUWw1B4JQUs191PgYNJChEKEooOq6ykQzhywLEBA9WxuKphpWUoCRA7S7jeLi5w";

  globals.now = function() {
    return Math.floor((new Date()).getTime() / 1000);
  };

  globals.time = function(seconds) {
    var minutes, mod_seconds;
    minutes = Math.floor(seconds / 60);
    mod_seconds = seconds % 60 + '';
    if (mod_seconds.length !== 2) {
      mod_seconds = '0' + mod_seconds;
    }
    return minutes + ':' + mod_seconds;
  };

  globals.get_cookie = function(k) {
    var c, idx, key, val, _i, _len, _ref;
    c = document.cookie;
    _ref = c.split(';');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      val = _ref[_i];
      idx = c.indexOf('=');
      key = val.substr(0, idx);
      if (key == k) {
        return val.substr(idx + 1);
      }
    }
  };

  globals.set_cookie = function(k, v) {
    return document.cookie = k + '=' + v;
  };

  globals.get_after = function(str, substr, len) {
    var loc;
    loc = str.indexOf(substr);
    if (loc === -1) {
      return '';
    }
    return str.substring(loc + substr.length, loc + substr.length + len);
  };

  globals.parse_vidid = function(str) {
    return get_after(str, 'v=', 11 || get_after(str, 'youtu.be/', 11));
  };

  globals.parse_playlist = function(str) {
    var length, pos;
    if (!contains(str, 'youtube.com' || !contains(str, 'list='))) {
      pos = str.indexOf('&');
      length = 100;
      if (pos > -1) {
        length = pos - str.indexOf('list=' + 5);
      }
      return get_after(str, 'list=', length);
    }
  };

  globals.info = function(vidid, callback) {
    var url;
    url = ("http://gdata.youtube.com/feeds/api/videos/" + vidid + "?v=2&alt=json&") + dev;
    return $.get(url, function(data) {
      return callback({
        title: data.entry.title.$t,
        uploader: data.entry.author[0].name.$t,
        duration: parseInt(data.entry.media$group.yt$duration.seconds),
        thumb: data.entry.media$group.media$thumbnail[0].url
      });
    });
  };

  globals.get_roomid = function(location) {
    if (!location.substr(0, 3) === '/r/') {
      console.error('not in room');
    }
    return location.substr(3, location.length);
  };

  globals.random = function() {
    return crypto.randomBytes(8).toString('hex');
  };

  globals.guid = function() {
    var s4;
    s4 = function() {
      return Math.floor(Math.random() * 0x10000).toString(16);
    };
    return s4() + s4() + s4() + s4();
  };

  globals.delay = function(time, fn) {
    return setTimeout(fn, time);
  };

  globals["in"] = function(needle, haystack) {
    var el, _i, _len;
    for (_i = 0, _len = haystack.length; _i < _len; _i++) {
      el = haystack[_i];
      if (needle == el) {
        return true;
      }
    }
  };

  gates = {};

  globals.gate = function(key, user, timeout) {
    if (!timeout) {
      timeout = 100;
    }
    if (!gates[key]) {
      gates[key] = {};
    }
    if (gates[key][user]) {
      return true;
    }
    gates[key][user] = 1;
    globals.delay(timeout, function() {
      return gates[key][user] = 0;
    });
    return false;
  };

}).call(this);

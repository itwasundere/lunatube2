// Generated by CoffeeScript 1.4.0
(function() {
  var cache, gen_class, gen_list, globals, load, models, now, save;

  globals = window || module.exports;

  now = function() {
    return (new Date).getTime();
  };

  globals.store = function(id, attrs, res) {
    if (id) {
      return res(id);
    } else {
      return res(now());
    }
  };

  globals.fetch = function(id, res) {
    return res({});
  };

  models = {};

  cache = {};

  save = function(inst) {
    return store(inst._id, inst._attrs, function(id) {
      inst._id = id;
      cache[id] = inst;
      return inst.emit('saved');
    });
  };

  load = function(inst) {
    if (!inst._id) {
      return;
    }
    return fetch(inst._id, function(attrs) {
      inst._attrs = attrs;
      cache[inst._id] = inst;
      return inst.emit('ready');
    });
  };

  globals.resolve = function(id, type) {
    if (!id) {
      return null;
    }
    if (cache[id]) {
      return cache[id];
    }
    if (!type) {
      return null;
    }
    return cache[id] = new models[type]({
      _id: id
    });
  };

  gen_class = function(name, schema) {
    var attr, attrs, link;
    if (!schema) {
      schema = {};
    }
    attrs = {};
    for (link in schema.links) {
      attrs['_' + link] = null;
    }
    for (attr in schema.attrs) {
      attrs[attr] = null;
    }
    return (function() {

      function _Class(_construction) {
        var k, v;
        this._construction = _construction;
        for (k in _construction) {
          v = _construction[k];
          if (k in this._attrs) {
            this._attrs[k] = v;
          }
        }
        if (_construction && _construction._id) {
          this._id = _construction._id;
          this.load();
        }
      }

      _Class.prototype._links = schema.links;

      _Class.prototype._attrs = attrs;

      _Class.prototype._events = {};

      _Class.prototype._type = name;

      _Class.prototype.get = function(key) {
        if (key in this._attrs) {
          return this._attrs[key];
        }
        if ('_' + key in this._attrs) {
          return resolve(this._attrs['_' + key], this._links[key]);
        }
      };

      _Class.prototype.set = function(key, val) {
        if (key in this._attrs) {
          return this._attrs[key] = val;
        } else if ('_' + key in this._attrs) {
          return this._attrs['_' + key] = val._id;
        }
      };

      _Class.prototype.bind = function(key, res) {
        if (!this._events[key]) {
          this._events[key] = [];
        }
        return this._events[key].push(res);
      };

      _Class.prototype.emit = function(key, data) {
        var res, _i, _len, _ref, _results;
        if (!this._events[key]) {
          return;
        }
        _ref = this._events[key];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          res = _ref[_i];
          _results.push(res(data));
        }
        return _results;
      };

      _Class.prototype.save = function() {
        if (save) {
          return save(this);
        }
      };

      _Class.prototype.load = function() {
        if (load) {
          return load(this);
        }
      };

      return _Class;

    })();
  };

  gen_list = function(name, model) {
    return (function() {

      function _Class() {}

      _Class.prototype._type = name;

      _Class.prototype._model = model;

      _Class.prototype._models = [];

      _Class.prototype.get = function(idx) {
        if (this._models[idx]) {
          return resolve(this._models[idx], this._type);
        }
      };

      _Class.prototype.add = function(model, idx) {
        if (idx == null) {
          idx = this._models.length;
        }
        return this._models.splice(idx, 0, model._id);
      };

      _Class.prototype.remove = function(model) {
        var idx;
        idx = this._models.indexOf(model._id);
        if (idx > -1) {
          return this._models.splice(idx, 1);
        }
      };

      _Class.prototype.save = function() {
        if (save) {
          return save(this);
        }
      };

      _Class.prototype.load = function() {
        if (load) {
          return load(this);
        }
      };

      return _Class;

    })();
  };

  globals.spark = function(schemas) {
    var name, schema;
    for (name in schemas) {
      schema = schemas[name];
      models[name] = gen_class(name, schema);
      models[name + 'list'] = gen_list(name, models[name]);
    }
    return models;
  };

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var db, fs, globals, mongoose, resolve_type, yaml;

  globals = module.exports;

  globals.schemas = {};

  globals.models = {};

  globals.instances = {};

  globals.store = function(inst, res) {
    var doc, k, v, _ref;
    doc = globals.instances[inst._id] || new globals.models[inst._type];
    _ref = inst._attrs;
    for (k in _ref) {
      v = _ref[k];
      doc[k] = v;
    }
    if (inst._models) {
      doc.models = inst._models;
    }
    doc.save(function() {
      return res(doc._id);
    });
    return globals.instances[doc._id] = doc;
  };

  globals.fetch = function(inst, res) {
    var id;
    if (!(id = inst._id)) {
      return;
    }
    return globals.models[inst._type].findOne({
      _id: id
    }, function(err, doc) {
      var attrs, k, v, _ref, _ref1;
      attrs = {};
      _ref = inst._attrs;
      for (k in _ref) {
        v = _ref[k];
        attrs[k] = doc[k];
      }
      _ref1 = inst._links;
      for (k in _ref1) {
        v = _ref1[k];
        attrs['_' + k] = doc[k];
      }
      if (doc.models) {
        attrs = doc.models;
      }
      globals.instances[doc._id] = doc;
      return res(attrs);
    });
  };

  globals.query = function(type, query, res) {
    return globals.models[type].find(query, function(err, docs) {
      var doc, ids, _i, _len;
      ids = [];
      for (_i = 0, _len = docs.length; _i < _len; _i++) {
        doc = docs[_i];
        ids.push(doc._id);
        globals.instances[doc._id] = doc;
      }
      return res(ids);
    });
  };

  mongoose = require('mongoose');

  yaml = require('js-yaml');

  fs = require('fs');

  db = mongoose.createConnection('localhost', 'test');

  resolve_type = function(type) {
    switch (type) {
      case 'String':
        return String;
      case 'Number':
        return Number;
    }
  };

  globals.init = function(schemas_file) {
    var classname, key, listschema, schema, skeleton, type, _ref, _ref1, _results;
    _results = [];
    for (classname in schemas_file) {
      schema = schemas_file[classname];
      skeleton = {};
      if (!schema) {
        schema = {};
      }
      _ref = schema.attrs;
      for (key in _ref) {
        type = _ref[key];
        skeleton[key] = resolve_type(type);
      }
      _ref1 = schema.links;
      for (key in _ref1) {
        type = _ref1[key];
        skeleton[key] = String;
      }
      schema = new mongoose.Schema(skeleton);
      globals.schemas[classname] = schema;
      globals.models[classname] = db.model(classname, schema);
      listschema = new mongoose.Schema({
        models: Array
      });
      _results.push(globals.models[classname + 'list'] = db.model(classname + 'list', listschema));
    }
    return _results;
  };

}).call(this);

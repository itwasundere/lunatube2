// Generated by CoffeeScript 1.4.0
(function() {
  var $, models, now, sparkle, utils;

  sparkle = require('./sparkle');

  models = sparkle.models;

  utils = require('./utils');

  now = utils.now;

  $ = require('jquery');

  models.video.extend({
    'cons': function() {
      var url, video;
      if (!this.get('vidid')) {
        return;
      }
      url = utils.yt.info(this.get('vidid'));
      video = this;
      console.log(url);
      return $.get(url, function(data) {
        video.set('title', data.entry.title.$t);
        video.set('uploader', data.entry.author[0].name.$t);
        video.set('duration', data.entry.media$group.yt$duration.seconds);
        return video.set('thumb', data.entry.media$group.media$thumbnail[0].url);
      });
    }
  });

  models.room.extend({
    'cons': function() {
      this.set('state', 'paused');
      return this.elapsed = 0;
    },
    'play': function() {
      this.elapsed = 0;
      this.start = now();
      return this.set('state', 'playing');
    },
    'pause': function() {
      this.elapsed = now() - this.start;
      return this.set('state', 'paused');
    },
    'seek': function(time) {
      this.start = now();
      return this.elapsed = time;
    },
    'state': function() {
      return {
        time: this.time(),
        current: this.get('current'),
        state: this.get('state')
      };
    },
    'time': function() {
      if (this.get('state') === 'playing') {
        return now() - this.start + this.elapsed;
      }
      if (this.get('state') === 'paused') {
        return this.elapsed;
      }
    }
  });

  sparkle.load();

  module.exports = {
    models: models,
    dump: sparkle.dump,
    lookup: sparkle.lookup
  };

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var app, express, fs, read, stylus, yaml;

  fs = require('fs');

  stylus = require('stylus');

  express = require('express');

  yaml = require('js-yaml');

  read = fs.readFileSync;

  app = express();

  app.use('/res', express["static"](process.cwd() + '/res'));

  app.use('/lib', express["static"](process.cwd() + '/lib'));

  app.get('/', function(req, res) {
    return res.render('test.jade');
  });

  app.get('/r/:id', function(req, res) {
    return res.render('room.jade');
  });

  app.get('/css/icons.css', function(req, res) {
    var sheet, sheet_name;
    sheet_name = process.cwd() + '/css/icons.css';
    sheet = stylus(read(sheet_name, 'utf8'));
    return sheet.render(function(err, css) {
      res.writeHead(200, {
        'Content-Type': 'text/css'
      });
      return res.end(css);
    });
  });

  app.get('/css/:color.css', function(req, res) {
    var key, sheet, sheet_name, theme, themes, themes_name, value;
    themes_name = process.cwd() + '/res/colors.yaml';
    themes = yaml.load(read(themes_name, 'utf8'));
    theme = themes[req.params.color] || {};
    sheet_name = process.cwd() + '/css/room.css';
    sheet = stylus(read(sheet_name, 'utf8'));
    for (key in theme) {
      value = theme[key];
      sheet.define('_' + key, new stylus.nodes.Literal('#' + value));
    }
    return sheet.render(function(err, css) {
      res.writeHead(200, {
        'Content-Type': 'text/css'
      });
      return res.end(css);
    });
  });

  app.listen(8080);

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var fs, io, logins, models, mongo, rooms, schemas, schemas_name, session, session_scheme, spark, utils, yaml,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  yaml = require('js-yaml');

  fs = require('fs');

  utils = require('./lib/utils');

  io = require('socket.io').listen(8081);

  mongo = require('./lib/mongo');

  spark = require('./lib/spark');

  utils = require('./lib/utils');

  schemas_name = __dirname + '/res/schema.yaml';

  schemas = yaml.load(fs.readFileSync(schemas_name, 'utf8'));

  models = spark.spark(schemas);

  mongo.init(schemas);

  spark.store = mongo.store;

  spark.fetch = mongo.fetch;

  spark.query = mongo.query;

  session_scheme = spark.gen_class('session', {
    attrs: {
      socket: null,
      user: null,
      room: null
    }
  });

  session = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    return _Class;

  })(session_scheme);

  logins = {};

  rooms = new models.roomlist;

  rooms.all();

  io.sockets.on('connection', function(socket) {
    var ip;
    ip = socket.handshake.address;
    if (utils.gate('join', ip)) {
      return;
    }
    return socket.on('join', function(data) {
      var cookie, room, sess, user;
      if (!data || !(room = rooms.get(data.roomid))) {
        return;
      }
      cookie = data.cookie;
      if (!(user = logins[cookie])) {
        user = new models.user;
        cookie = utils.random();
        logins[cookie] = user;
      }
      sess = new session({
        user: user,
        room: room,
        socket: socket
      });
      return socket.emit('joined', {
        cookie: cookie
      });
    });
  });

}).call(this);
